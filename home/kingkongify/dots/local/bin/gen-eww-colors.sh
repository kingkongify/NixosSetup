#!/usr/bin/env bash
# gen-eww-colors.sh
# Reads ~/.cache/wal/colors.scss and generates ~/.config/eww/styles/_colors.scss
# Uses ~/.local/bin/mpvpywal/colortransparency.json for per-color alpha tweaks
# Dependencies: jq, awk, bash

set -euo pipefail

WAL_SCSS="${HOME}/.cache/wal/colors.scss"
OUT_SCSS="${HOME}/.config/eww/styles/_colors.scss"
TRANSP_JSON="${HOME}/.local/bin/wallpapertool/colortransparency.json"
DEFAULT_ALPHA=0.85

mkdir -p "$(dirname "$OUT_SCSS")" "$(dirname "$TRANSP_JSON")"

# create default JSON if missing
if [ ! -f "$TRANSP_JSON" ]; then
  cat > "$TRANSP_JSON" <<'JSON'
{
  "defaults": {
    "default": 0.85
  },
  "background": 0.85,
  "foreground": 1,
  "cursor": 1
}
JSON
  echo "Created default transparency JSON at $TRANSP_JSON"
fi

# bail if no wal scss
if [ ! -f "$WAL_SCSS" ]; then
  echo "Source not found: $WAL_SCSS"
  exit 1
fi

# helpers
hex2rgb() {
  local hex="$1"
  printf "%d, %d, %d" "0x${hex:1:2}" "0x${hex:3:2}" "0x${hex:5:2}"
}

get_alpha_for() {
  local key="$1"
  local raw
  raw=$(jq -r --arg k "$key" '
    if .[$k] != null then .[$k]
    elif (.defaults and .defaults.default != null) then .defaults.default
    else null end
  ' "$TRANSP_JSON")
  [ "$raw" = "null" ] && raw="$DEFAULT_ALPHA"
  awk -v a="$raw" 'BEGIN { if (a+0 > 1) printf "%.6f", a/100; else printf "%.6f", a }'
}

# parse wal scss -> dump key/val
mapfile -t lines < <(awk -F: '/^\$/ {
  gsub(/;/,"",$2)
  gsub(/^[ \t]+|[ \t]+$/,"",$1)
  gsub(/^[ \t]+|[ \t]+$/,"",$2)
  sub(/^\$/,"",$1)
  if ($2 ~ /^#/) printf "%s %s\n", $1, $2
}' "$WAL_SCSS")

# write output
{
  cat <<'HEADER'
/* ------------------------------------------------------------------
   _colors.scss
   Generated by gen-eww-colors.sh
   Source: ~/.cache/wal/colors.scss
   Alphas: ~/.local/bin/mpvpywal/colortransparency.json
   ------------------------------------------------------------------ */
HEADER
  echo ""

  # raw hex vars
  for kv in "${lines[@]}"; do
    key="${kv%% *}"
    val="${kv#* }"
    echo "\$$key: $val;"
  done

  echo ""
  echo "/* rgba numeric variants (ready for eww) */"
  for kv in "${lines[@]}"; do
    key="${kv%% *}"
    val="${kv#* }"
    rgb=$(hex2rgb "$val")
    a=$(get_alpha_for "$key")
    echo "\$${key}-rgba: rgba(${rgb}, $(printf "%g" "$a"));"
  done

  echo ""
  echo "/* End generated colors */"
} > "$OUT_SCSS"

chmod 644 "$OUT_SCSS"
echo "Wrote $OUT_SCSS"
